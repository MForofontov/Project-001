version: '3.8' # Specify the version of the Docker Compose file format

services:

  # NGINX service configuration
  nginx:
    build:
      context: ./nginx # Build the NGINX service from the nginx directory
    container_name: nginx # Name the container nginx
    ports:
      - '80:80' # Map port 80 of the host to port 80 of the container
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf # Mount custom NGINX config file
    depends_on:
      - react_frontend # Ensure the react_frontend service starts before this service

      - user_management_service # Ensure the user_management_service starts before this service
      - data_processing_service # Ensure the data_processing_service starts before this service
    networks:
      - app-network # Connect to the app-network

  # React frontend service configuration
  react_frontend:
    build:
      context: ./react_frontend # Build the react_frontend service from the react_frontend directory
    container_name: react_frontend # Name the container react_frontend
    env_file:
      - .env
    ports:
      - '5173:5173' # Map port 5173 of the host to port 5173 of the container (Vite dev server)
    volumes:
      - ./react_frontend:/react_frontend_docker # Mount the react_frontend source code directory
    command: npm run dev -- --host 0.0.0.0 # Run the Vite dev server
    user: "${UID}:${GID}" # Use the specified user and group IDs
    networks:
      - app-network # Connect to the app-network

  # User management service configuration
  user_management_service:
    build:
      context: ./user_management_service # Build the user_management_service from the user_management_service directory
    container_name: user_management_service # Name the container user_management_service
    env_file:
      - .env # Use the environment variables from the .env file
    ports:
      - '8000:8000' # Map port 8000 of the host to port 8000 of the container
    volumes:
      - ./user_management_service:/user_management_service_docker # Mount the user_management_service source code directory
    user: "${UID}:${GID}" # Use the specified user and group IDs
    depends_on:
      - db_user_management_service # Ensure the db_user_management_service starts before this service
      - redis_user_management_service # Ensure the redis_user_management_service starts before this service
      - kafka # Ensure the kafka service starts before this service
    networks:
      - app-network # Connect to the app-network

  # Data processing service configuration
  data_processing_service:
    build:
      context: ./data_processing_service # Build the data_processing_service from the data_processing_service directory
    container_name: data_processing_service # Name the container data_processing_service
    env_file:
      - .env # Use the environment variables from the .env file
    ports:
      - '8001:8001' # Map port 8001 of the host to port 8001 of the container
    volumes:
      - ./data_processing_service:/data_processing_service_docker # Mount the data_processing_service source code directory
    user: "${UID}:${GID}" # Use the specified user and group IDs
    depends_on:
      - db_data_processing_service # Ensure the db_data_processing_service starts before this service
      - data_processing_service_redis # Ensure the data_processing_service_redis starts before this service
      - kafka # Ensure the kafka service starts before this service
    networks:
      - app-network # Connect to the app-network

  # PostgreSQL service configuration for the user management service
  db_user_management_service:
    image: postgres:latest # Use the latest PostgreSQL image
    container_name: db_user_management_service # Name the container db_user_management_service
    env_file:
      - .env # Use the environment variables from the .env file
    environment:
      - POSTGRES_USER=${POSTGRES_USER_UMS} # Set the PostgreSQL user from the environment variable
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_UMS} # Set the PostgreSQL password from the environment variable
      - POSTGRES_DB=${POSTGRES_DB_UMS} # Set the PostgreSQL database name from the environment variable
      - PGPORT=${DB_PORT_UMS} # Set the PostgreSQL port from the environment variable
    volumes:
      - postgres_data_user_management:/var/lib/postgresql/data # Mount the PostgreSQL data directory
    ports:
      - '5432:5432' # Map port 5432 of the host to port 5432 of the container
    networks:
      - app-network # Connect to the app-network

  # PostgreSQL service configuration for the data processing service
  db_data_processing_service:
    image: postgres:latest # Use the latest PostgreSQL image
    container_name: db_data_processing_service # Name the container db_data_processing_service
    env_file:
      - .env # Use the environment variables from the .env file
    environment:
      - POSTGRES_USER=${POSTGRES_USER_DPS} # Set the PostgreSQL user from the environment variable
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_DPS} # Set the PostgreSQL password from the environment variable
      - POSTGRES_DB=${POSTGRES_DB_DPS} # Set the PostgreSQL database name from the environment variable
      - PGPORT=${DB_PORT_DPS} # Set the PostgreSQL port from the environment variable
    volumes:
      - postgres_data_data_processing:/var/lib/postgresql/data # Mount the PostgreSQL data directory
    ports:
      - '5433:5433' # Map port 5433 of the host to port 5433 of the container
    networks:
      - app-network # Connect to the app-network

  # Celery worker service configuration for the user management service
  celery_worker_user_management_service:
    build:
      context: ./user_management_service
    container_name: celery_worker_user_management_service
    command: celery -A user_management_service worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis_user_management_service
      - user_management_service
    networks:
      - app-network

  # Redis service configuration for the user management service
  redis_user_management_service:
    image: redis:latest # Use the latest Redis image
    container_name: redis_user_management_service # Name the container redis_user_management_service
    ports:
      - '6379:6379' # Map port 6379 of the host to port 6379 of the container
    networks:
      - app-network # Connect to the app-network

  # Redis service configuration for the data processing service
  data_processing_service_redis:
    image: redis:latest # Use the latest Redis image
    container_name: data_processing_service_redis # Name the container data_processing_service_redis
    ports:
      - '6380:6380' # Map port 6380 of the host to port 6380 of the container
    networks:
      - app-network # Connect to the app-network

  # Zookeeper service configuration
  zookeeper:
    image: confluentinc/cp-zookeeper:latest # Use the latest Confluent Zookeeper image
    container_name: zookeeper # Name the container zookeeper
    ports:
      - '2181:2181' # Map port 2181 of the host to port 2181 of the container
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # Set the Zookeeper client port to 2181
      ZOOKEEPER_TICK_TIME: 2000 # Set the tick time for Zookeeper
    networks:
      - app-network # Connect to the app-network

  # Kafka service configuration
  kafka:
    image: confluentinc/cp-kafka:latest # Use the latest Confluent Kafka image
    container_name: kafka # Name the container kafka
    ports:
      - '9092:9092' # Map port 9092 of the host to port 9092 of the container
    environment:
      KAFKA_BROKER_ID: 1 # Set the Kafka broker ID to 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181' # Connect Kafka to the Zookeeper service on port 2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # Advertise Kafka listeners on port 9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Set the replication factor for the offsets topic to 1
    depends_on:
      - zookeeper # Ensure the zookeeper service starts before this service
    networks:
      - app-network # Connect to the app-network

volumes:
  postgres_data_user_management: # Define the volume for the user management PostgreSQL data
  postgres_data_data_processing: # Define the volume for the data processing PostgreSQL data

networks:
  app-network:
    driver: bridge # Use the bridge network driver