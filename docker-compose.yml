version: '3.8' # Specify the version of the Docker Compose file format

services:

  # NGINX service configuration
  nginx:
    build:
      context: ./nginx
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - react-frontend
      - user-management-service
      - data-processing-service
      - prometheus
      - grafana
    networks:
      - app-network

  # React frontend service configuration
  react-frontend:
    build:
      context: ./react_frontend
    container_name: react-frontend
    env_file:
      - .env
    ports:
      - '5173:5173'
    volumes:
      - ./react_frontend:/react_frontend_docker
    command: npm run dev -- --host 0.0.0.0
    user: "${UID}:${GID}"
    depends_on:
      - prometheus
      - grafana
    networks:
      - app-network

  # User management service configuration
  user-management-service:
    build:
      context: ./user_management_service
    container_name: user-management-service
    env_file:
      - .env
    ports:
      - '8000:8000'
    volumes:
      - ./user_management_service:/user_management_service_docker
    user: "${UID}:${GID}"
    depends_on:
      - db-user-management-service
      - redis-user-management-service
      - kafka
      - prometheus
      - grafana
    networks:
      - app-network

  # Data processing service configuration
  data-processing-service:
    build:
      context: ./data_processing_service
    container_name: data-processing-service
    env_file:
      - .env
    ports:
      - '8001:8001'
    volumes:
      - ./data_processing_service:/data_processing_service_docker
    user: "${UID}:${GID}"
    depends_on:
      - db-data-processing-service
      - data-processing-service-redis
      - kafka
      - prometheus
      - grafana
    networks:
      - app-network

  # PostgreSQL service configuration for the user management service
  db-user-management-service:
    image: postgres:latest
    container_name: db-user-management-service
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER_UMS}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_UMS}
      - POSTGRES_DB=${POSTGRES_DB_UMS}
      - PGPORT=${DB_PORT_UMS}
    volumes:
      - postgres-data-user-management:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - app-network

  # PostgreSQL service configuration for the data processing service
  db-data-processing-service:
    image: postgres:latest
    container_name: db-data-processing-service
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER_DPS}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_DPS}
      - POSTGRES_DB=${POSTGRES_DB_DPS}
      - PGPORT=${DB_PORT_DPS}
    volumes:
      - postgres-data-data-processing:/var/lib/postgresql/data
    ports:
      - '5433:5433'
    networks:
      - app-network

  # Celery worker service configuration for the user management service
  celery-worker-user-management-service:
    build:
      context: ./user_management_service
    container_name: celery-worker-user-management-service
    command: celery -A user-management-service worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis-user-management-service
      - user-management-service
    networks:
      - app-network

  # Redis service configuration for the user management service
  redis-user-management-service:
    image: redis:latest
    container_name: redis-user-management-service
    ports:
      - '6379:6379'
    networks:
      - app-network

  # Redis service configuration for the data processing service
  data-processing-service-redis:
    image: redis:latest
    container_name: data-processing-service-redis
    ports:
      - '6380:6380'
    networks:
      - app-network

  # Kafka service configuration with KRaft
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
          KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
          KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
          KAFKA_LISTENERS: ${KAFKA_LISTENERS}
          KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
          KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CONTROLLER_QUORUM_VOTERS}
          KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
          KAFKA_NODE_ID: ${KAFKA_NODE_ID}
          KAFKA_LOG_DIRS: ${KAFKA_LOG_DIRS}
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
          KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_MIN_INSYNC_REPLICAS}
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - .env
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - app-network

volumes:
  postgres-data-user-management:
  postgres-data-data-processing:
  kafka-data:
  grafana-storage:

networks:
  app-network:
    driver: bridge