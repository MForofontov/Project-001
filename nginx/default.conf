server {
    listen 80;  # Listen on port 80 for HTTP connections
    server_name localhost;  # The server name (domain) for this configuration

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;  # Redirect all HTTP traffic to HTTPS
}

server {
    listen 443 ssl;  # Listen on port 443 for SSL (HTTPS) connections
    server_name localhost;  # The server name (domain) for this configuration

    ssl_certificate /etc/nginx/ssl/localhost.pem;  # Path to the SSL certificate
    ssl_certificate_key /etc/nginx/ssl/localhost-key.pem;  # Path to the SSL certificate key

    # Enable HSTS (HTTP Strict Transport Security)
    # This header tells browsers to only access your site using HTTPS and not to accept any connections over HTTP.
    # max-age=31536000 specifies that the browser should remember this policy for 1 year (in seconds).
    # includeSubDomains applies this policy to all subdomains as well.
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_pass http://react_frontend:5173;  # Proxy requests to the React frontend server running on port 5173
        proxy_http_version 1.1;  # Use HTTP/1.1 for the proxy connection
        proxy_set_header Upgrade $http_upgrade;  # Pass the Upgrade header from the client to the backend
        proxy_set_header Connection "upgrade";  # Set the Connection header to "upgrade" for WebSocket support
        proxy_set_header Host $host;  # Pass the original Host header from the client to the backend
        proxy_set_header X-Real-IP $remote_addr;  # Pass the real client IP address to the backend
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the X-Forwarded-For header for client IP chain
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the original protocol (http or https) to the backend
    }

    location /user-management {
        proxy_pass http://user_management_service:8000/user-management;  # Proxy API requests to the user management service running on port 8000
        proxy_set_header Host $host;  # Pass the original Host header from the client to the backend
        proxy_set_header X-Real-IP $remote_addr;  # Pass the real client IP address to the backend
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the X-Forwarded-For header for client IP chain
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the original protocol (http or https) to the backend
    }

    location /api/data-processing/ {
        proxy_pass http://data_processing_service:8001/;  # Proxy API requests to the data processing service running on port 8001
        proxy_set_header Host $host;  # Pass the original Host header from the client to the backend
        proxy_set_header X-Real-IP $remote_addr;  # Pass the real client IP address to the backend
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the X-Forwarded-For header for client IP chain
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the original protocol (http or https) to the backend
    }

    gzip on;  # Enable gzip compression
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;  # Specify the MIME types to compress
    gzip_min_length 256;  # Only compress responses that are at least 256 bytes

    add_header X-Frame-Options "SAMEORIGIN";  # Prevent clickjacking by only allowing the site to be framed by the same origin
    add_header X-XSS-Protection "1; mode=block";  # Enable XSS protection in the browser and block the page if an attack is detected
    add_header X-Content-Type-Options "nosniff";  # Prevent MIME type sniffing by the browser
}